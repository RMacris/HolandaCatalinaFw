package org.hcjf.io.net.http.datasources;

import org.hcjf.errors.HCJFRuntimeException;
import org.hcjf.layers.query.Query;
import org.hcjf.layers.query.Queryable;
import org.hcjf.properties.SystemProperties;
import org.hcjf.service.Service;
import org.hcjf.utils.Strings;

import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public final class DataSourceService extends Service<DataSourceServiceConsumer> {

    private static final String THREAD_POOL_NAME = "DATA_SOURCE_THREAD_POOL";
    private static final DataSourceService instance;

    static {
        instance = new DataSourceService();
    }

    private final ThreadPoolExecutor serviceExecutor;

    private DataSourceService() {
        super(SystemProperties.get(SystemProperties.Net.Http.DataSources.SERVICE_NAME),
                SystemProperties.getInteger(SystemProperties.Net.Http.DataSources.SERVICE_PRIORITY));
        this.serviceExecutor = (ThreadPoolExecutor) Executors.newCachedThreadPool(createThreadFactory());
        this.serviceExecutor.setCorePoolSize(SystemProperties.getInteger(SystemProperties.Service.THREAD_POOL_CORE_SIZE));
        this.serviceExecutor.setMaximumPoolSize(SystemProperties.getInteger(SystemProperties.Service.THREAD_POOL_MAX_SIZE));
        this.serviceExecutor.setKeepAliveTime(SystemProperties.getLong(SystemProperties.Service.THREAD_POOL_KEEP_ALIVE_TIME), TimeUnit.SECONDS);
    }

    public static DataSourceService getInstance() {
        return instance;
    }

    /**
     * This method register the consumer in the service.
     * @param consumer Object with the logic to consume the service.
     * @throws RuntimeException It contains exceptions generated by
     *                          the particular logic of each implementation.
     */
    @Override
    public void registerConsumer(DataSourceServiceConsumer consumer) {
        Map<String,Object> rawDataSources = consumer.getRawDataSources();
        Map<String,Object> dataSourcesMap = new HashMap<>();
        Boolean threadPoolEnabled = SystemProperties.getBoolean(SystemProperties.Net.Http.DataSources.THREAD_POOL_ENABLED);
        if(threadPoolEnabled) {
            fork(() -> {
                Collection<Future> futures = new ArrayList<>();
                for (String dataSourceName : rawDataSources.keySet()) {
                    futures.add(fork(() -> {
                        resolveDataSource(dataSourceName, rawDataSources.get(dataSourceName), dataSourcesMap);
                    }, THREAD_POOL_NAME, serviceExecutor));
                }
                for (Future future : futures) {
                    try {
                        future.get();
                    } catch (Exception ex) {
                        consumer.setThrowable(ex);
                        break;
                    }
                }
                consumer.setResult(dataSourcesMap);
            }, THREAD_POOL_NAME, serviceExecutor);
        } else {
            for (String dataSourceName : rawDataSources.keySet()) {
                try {
                    resolveDataSource(dataSourceName, rawDataSources.get(dataSourceName), dataSourcesMap);
                } catch (Exception ex){
                    consumer.setThrowable(ex);
                    break;
                }
            }
            consumer.setResult(dataSourcesMap);
        }
    }

    private void resolveDataSource(String dataSourceName, Object dataSource, Map<String,Object> dataSourcesMap) {
        if(dataSource instanceof String) {
            try {
                Queryable queryable = Query.compile((String) dataSource);
                dataSourcesMap.put(dataSourceName, Query.evaluate(queryable));
            } catch (Exception e) {
                throw new HCJFRuntimeException(Strings.createTaggedMessage(String.format("Error resolving data source %s", dataSourceName), "DATA_SOURCE"), e);
            }
        } else if(dataSource instanceof List) {
            dataSourcesMap.put(dataSourceName, dataSource);
        } else if(dataSource instanceof Map) {
            List list = new ArrayList();
            list.add(dataSource);
            dataSourcesMap.put(dataSourceName, list);
        }
    }

    /**
     * Unregister a specific consumer.
     * @param consumer Consumer to unregister.
     */
    @Override
    public void unregisterConsumer(DataSourceServiceConsumer consumer) {

    }
}
