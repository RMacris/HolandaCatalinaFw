package org.hcjf.cloud.memory;

import org.hcjf.service.Service;
import org.hcjf.service.ServiceConsumer;

import java.util.Map;
import java.util.Queue;

/**
 * Created by javaito on 9/6/2016.
 */
public abstract class SharedMemory extends Service<SharedMemory.SharedMemoryConsumer> {

    protected static final String SHARED_MEMORY_LOG_TAG = "SHARED_MEMORY";
    private static final String SHARED_MEMORY_SERVICE_NAME = "Shared Memory";

    public SharedMemory() {
        super(SHARED_MEMORY_SERVICE_NAME);
    }

    /**
     * This method register the consumer in the service.
     *
     * @param consumer Object with the logic to consume the service.
     * @throws RuntimeException It contains exceptions generated by
     *                          the particular logic of each implementation.
     */
    @Override
    public void registerConsumer(SharedMemoryConsumer consumer) {
        consumer.setMemory(this);
    }

    protected abstract <K extends Object, V extends Object> Map<K, V> getMap(String memoryName);

    protected abstract <V extends Object> Queue<V> getQueue(String memoryName);

    public static class SharedMemoryConsumer implements ServiceConsumer {

        private SharedMemory memory;

        public SharedMemoryConsumer() {
        }

        private void setMemory(SharedMemory memory) {
            this.memory = memory;
        }

        public final <K extends Object, V extends Object> Map<K, V> getMap(String memoryName) {
            if(memory == null) {
                throw new IllegalStateException("Consumer is not registered");
            }
            return memory.getMap(memoryName);
        }

        public final <V extends Object> Queue<V> getQueue(String memoryName) {
            if(memory == null) {
                throw new IllegalStateException("Consumer is not registered");
            }
            return memory.getQueue(memoryName);
        }
    }
}
